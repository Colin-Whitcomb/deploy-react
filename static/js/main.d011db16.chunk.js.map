{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Jumbotron/jumbo.js","components/Navbar/navbar.js","components/Container/container.js","App.js","index.js"],"names":["CharacterCard","props","className","onClick","chooseCharacter","id","alt","name","src","image","Wrapper","children","jumbotron","message","count","highScore","navbar","href","Container","Row","App","state","characters","chosenCharacters","wasClicked","checkChosen","setState","shuffleCards","includes","push","currentScore","length","console","log","array","i","j","Math","floor","random","this","map","character","Component","ReactDOM","render","document","getElementById"],"mappings":"s8EAaeA,MAVf,SAAuBC,GACnB,OACI,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,gBAAgBH,EAAMI,MAC7D,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOJ,GAAIJ,EAAMI,Q,MCAnDK,MAJf,SAAiBT,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,aCa5BC,MAbf,SAAmBX,GACf,OACI,yBAAKC,UAAU,6BACnB,yBAAKA,UAAU,yBACf,wBAAIA,UAAU,aAAd,sBACCD,EAAMY,QAAW,wBAAIX,UAAU,gBAAiBD,EAAMY,SAAkB,wBAAIX,UAAU,gBAAd,qCACzE,6BACA,wBAAIA,UAAU,gBAAd,UAAsCD,EAAMa,MAA5C,kBAAkEb,EAAMc,cCE7DC,MAXX,SAAiBf,GACb,OACA,yBAAKC,UAAU,8BACV,uBAAGA,UAAU,eAAee,KAAK,KAAjC,cACChB,EAAMY,QAAW,wBAAIX,UAAU,gBAAiBD,EAAMY,SAAkB,wBAAIX,UAAU,gBAAd,6CCF/E,SAASgB,EAAUjB,GACtB,OAAO,yBAAKC,UAAU,aAAcD,EAAMU,UAGvC,SAASQ,EAAIlB,GAChB,OAAO,yBAAKC,UAAU,OAAOD,EAAMU,U,IC4FxBS,E,4MAxFXC,MAAQ,CACJC,WAAYA,EACZR,MAAO,EACPS,iBAAkB,GAClBR,UAAW,EACXF,QAAS,wF,EAGbW,WAAa,SAAAnB,GAGT,EAAKoB,YAAYpB,GAEjB,EAAKqB,SAAS,CACVJ,WAAY,EAAKK,aAAaL,M,EAItCG,YAAc,SAAApB,GAEV,GAAI,EAAKgB,MAAME,iBAAiBK,SAASvB,GACrC,EAAKqB,SAAS,CACVH,iBAAkB,GAClBT,MAAO,EACPD,QAAS,kCAEV,CACH,EAAKQ,MAAME,iBAAiBM,KAAKxB,GACjC,IAAIyB,EAAe,EAAKT,MAAME,iBAAiBQ,OAC/CC,QAAQC,IAAIH,GACR,EAAKT,MAAMN,UAAYe,EACvB,EAAKJ,SAAS,CACVb,QAAS,2BACTC,MAAOgB,EACPf,UAAWe,IAGf,EAAKJ,SAAS,CACVb,QAAS,2BACTC,MAAOgB,M,EAMvBH,aAAe,SAAAO,GAGX,IADA,IACSC,EAAID,EAAMH,OAAS,EAAGI,EAAI,EAAGA,IAAK,CACvC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADH,EAEhB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAME,GAFsB,KAI3C,OAAOF,G,uDAGA,IAAD,OACN,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MAKA,kBAAC,EAAD,CACApB,MAAO0B,KAAKnB,MAAMP,MAClBC,UAAWyB,KAAKnB,MAAMN,UACtBF,QAAS2B,KAAKnB,MAAMR,UAGpB,kBAACK,EAAD,KACI,kBAACC,EAAD,KAEHqB,KAAKnB,MAAMC,WAAWmB,KAAI,SAAAC,GAAS,OAChC,kBAAC,EAAD,CACAtC,gBAAiB,EAAKoB,WACtBjB,KAAMmC,EAAUnC,KAChBE,MAAOiC,EAAUjC,MACjBJ,GAAIqC,EAAUrC,e,GAhFhBsC,aCNlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d011db16.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction CharacterCard(props) {\n    return (\n        <div className='card' onClick={() => props.chooseCharacter(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} id={props.id}/>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from 'react';\nimport \"./style.css\";\n\n\nfunction jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n    <div className=\"container text-center\">\n    <h1 className=\"display-4\">Avatar Memory Game</h1>\n    {props.message ? (<h1 className=\"navbar-brand\" >{props.message}</h1>) : (<h1 className=\"navbar-brand\" >Click an image to start the game!</h1>)}\n    <br></br>\n    <h3 className=\"navbar-brand\" >Score: {props.count} | High Score: {props.highScore}</h3>\n  </div>\n</div>\n    )\n}\n\nexport default jumbotron;","import React from \"react\";\n\n    function navbar (props) {\n        return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n             <a className=\"navbar-brand\" href=\"/\">React Game</a>\n             {props.message ? (<h4 className=\"navbar-brand\" >{props.message}</h4>) : (<h4 className=\"navbar-brand\" >Be careful not to pick the same Avatar!</h4>)}\n             {/* <h4 className=\"navbar-brand\" >Score: {props.count} | High Score {props.highScore}</h4> */}\n      </nav>\n        )\n    }\n\n\nexport default navbar;","import React from \"react\";\n// import \"./style.css\";\n\n\nexport function Container(props) {\n    return <div className=\"container\" >{props.children}</div>;\n}\n\nexport function Row(props) {\n    return <div className=\"row\">{props.children}</div>\n}\n\nexport function Col(props) {\n    return <div className=\"col\">{props.children}</div>\n}","import React, { Component } from \"react\";\nimport CharacterCard from './components/CharacterCard/index';\nimport Wrapper from './components/Wrapper/index';\nimport characters from './characters.json';\nimport Jumbotron from \"./components/Jumbotron/jumbo\";\nimport Navbar from \"./components/Navbar/navbar\"\nimport { Container, Row, } from './components/Container/container.js'\n// import { Container, Row, Col } from 'react-bootstrap'\n\n\nclass App extends Component {\n\n    \n    state = {\n        characters: characters,\n        count: 0,\n        chosenCharacters: [],\n        highScore: 0,\n        message: \"Try to guess all 12 characters without clicking duplicates. Click an image to start!\",\n    };\n  \n    wasClicked = id => { \n       \n        // call game functions\n        this.checkChosen(id);\n\n        this.setState({\n            characters: this.shuffleCards(characters)\n        })\n    };\n\n    checkChosen = id => {\n        // if user has already chosen, reset game\n        if (this.state.chosenCharacters.includes(id)) {\n            this.setState({\n                chosenCharacters: [],\n                count: 0,\n                message: \"Already picked, try again\"\n             })\n        } else {\n            this.state.chosenCharacters.push(id);\n            let currentScore = this.state.chosenCharacters.length;\n            console.log(currentScore);\n            if (this.state.highScore < currentScore){\n                this.setState({\n                    message: \"Good pick! Choose again.\",\n                    count: currentScore,\n                    highScore: currentScore,\n                })\n            } else {\n                this.setState({\n                    message: \"Good pick! Choose again.\",\n                    count: currentScore,\n                })\n            }\n        }\n    }\n    \n    shuffleCards = array => {\n        // eslint-disable-next-line\n        var j, x;\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    render () {\n        return (\n            <Wrapper>\n                <Navbar\n                // count={this.state.count}\n                // highScore={this.state.highScore}\n                // message={this.state.message}\n                />\n                <Jumbotron \n                count={this.state.count}\n                highScore={this.state.highScore}\n                message={this.state.message}\n                />\n\n                <Container>\n                    <Row>\n                      \n                {this.state.characters.map(character => (\n                    <CharacterCard \n                    chooseCharacter={this.wasClicked}\n                    name={character.name}\n                    image={character.image}\n                    id={character.id}\n            \n                />\n                ))}\n                        \n                    </Row>\n                </Container>\n            </Wrapper>\n        );\n    }\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}